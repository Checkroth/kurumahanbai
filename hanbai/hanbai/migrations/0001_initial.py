# Generated by Django 3.1.5 on 2021-01-29 03:32

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConsumptionTax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspection_registration_delivery_tax', models.PositiveIntegerField(null=True, verbose_name='検査・登録・届出')),
                ('proof_of_storage_space', models.PositiveIntegerField(null=True, verbose_name='車庫証明')),
                ('previous_vehicle_processing_fee', models.PositiveIntegerField(null=True, verbose_name='下取者手続')),
                ('delivery_fee', models.PositiveIntegerField(null=True, verbose_name='納車費用')),
                ('audit_fee', models.PositiveIntegerField(null=True, verbose_name='査定料')),
                ('remaining_vehicle_tax', models.PositiveIntegerField(null=True, verbose_name='自動車税未経過相当額')),
                ('remiaining_liability', models.PositiveIntegerField(null=True, verbose_name='自賠責未経過相当額')),
                ('recycle_management_fee', models.PositiveIntegerField(null=True, verbose_name='リサイクル資金管理料金')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='氏名')),
                ('name_furi', models.CharField(blank=True, max_length=255, verbose_name='フリガナ')),
                ('birthday', models.DateField(null=True, verbose_name='生年月日')),
                ('postal_code', models.CharField(blank=True, max_length=8, verbose_name='郵便番号')),
                ('phone', models.CharField(blank=True, max_length=12, verbose_name='電話番号')),
                ('address', models.TextField(blank=True, verbose_name='住所')),
                ('contact_name', models.CharField(blank=True, max_length=255, verbose_name='連絡先＿名')),
                ('contact_phone', models.CharField(blank=True, max_length=12, verbose_name='連絡先')),
            ],
        ),
        migrations.CreateModel(
            name='CustomSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_name', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ExtraField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('value_type', models.IntegerField(choices=[(1, 'String'), (2, 'Integer')])),
                ('string_value', models.CharField(blank=True, max_length=255, null=True)),
                ('integer_value', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InsuranceTax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_tax', models.PositiveIntegerField(null=True, verbose_name='自動車税')),
                ('income_tax', models.PositiveIntegerField(null=True, verbose_name='所得税')),
                ('vehicle_liability_insurance', models.PositiveIntegerField(null=True, verbose_name='自賠責保険料')),
                ('optional_insurance', models.PositiveIntegerField(null=True, verbose_name='任意保険料')),
                ('stamp_duty', models.PositiveIntegerField(null=True, verbose_name='印紙税')),
            ],
        ),
        migrations.CreateModel(
            name='Itemization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_price', models.PositiveIntegerField(null=True, verbose_name='車輌本体価格')),
                ('special_discount', models.PositiveIntegerField(null=True, verbose_name='特別値引き')),
                ('down_payment', models.PositiveIntegerField(null=True, verbose_name='頭金')),
                ('trade_in_price', models.PositiveIntegerField(null=True, verbose_name='下取者価格')),
                ('accessories', models.OneToOneField(help_text='付属品', on_delete=django.db.models.deletion.CASCADE, related_name='itemization_accessories', to='hanbai.customsection')),
                ('consumption_tax', models.OneToOneField(help_text='消費税課税対象（課税)', on_delete=django.db.models.deletion.PROTECT, to='hanbai.consumptiontax')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installment_count', models.PositiveIntegerField(null=True, verbose_name='支払い回数')),
                ('initial_installment_price', models.PositiveIntegerField(null=True, verbose_name='初回支払い額')),
                ('second_and_on_installment_price', models.PositiveIntegerField(null=True, verbose_name='2回目以降支払い額')),
                ('bonus_amount', models.PositiveIntegerField(null=True, verbose_name='ボーナス支払い額')),
                ('bonus_count', models.PositiveIntegerField(null=True, verbose_name='ボーナス回数')),
                ('credit_card_company', models.CharField(blank=True, max_length=255, verbose_name='クレジット会社名')),
            ],
        ),
        migrations.CreateModel(
            name='PreviousVehicleInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_model', models.CharField(blank=True, max_length=255, verbose_name='型式')),
                ('car_name', models.CharField(blank=True, max_length=255, verbose_name='車名')),
                ('model_year', models.CharField(blank=True, choices=[('西', '西暦'), ('昭', '昭和'), ('平', '平成'), ('令', '令和')], max_length=2, verbose_name='年式_年')),
                ('model_month', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='年式_月')),
                ('inspection_year', models.IntegerField(null=True, verbose_name='車検_年')),
                ('inspection_month', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='車検_月')),
                ('model_number', models.CharField(blank=True, max_length=255, verbose_name='車台番号')),
                ('registration_number', models.CharField(blank=True, max_length=255, verbose_name='登録番号')),
                ('owner', models.TextField(blank=True, verbose_name='使用者')),
                ('model_specificaiton', models.CharField(blank=True, max_length=255, verbose_name='型式指定')),
                ('classification', models.CharField(blank=True, max_length=255, verbose_name='類別')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegisteredHolderInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='氏名')),
                ('name_furi', models.CharField(blank=True, max_length=255, verbose_name='フリガナ')),
                ('postal_code', models.CharField(blank=True, max_length=8, verbose_name='郵便番号')),
                ('phone', models.CharField(blank=True, max_length=12, verbose_name='電話番号')),
                ('address', models.TextField(blank=True, verbose_name='住所')),
            ],
        ),
        migrations.CreateModel(
            name='TaxExemption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspection_registration_delivery_exemption', models.PositiveIntegerField(null=True, verbose_name='怨嗟・登録・届出')),
                ('proof_of_storage_exemption', models.PositiveIntegerField(null=True, verbose_name='車庫証明')),
                ('previous_vehicle_processing_exemption', models.PositiveIntegerField(null=True, verbose_name='下取者手続')),
                ('recycle_deposit', models.PositiveIntegerField(null=True, verbose_name='リサイクル預託金額合計')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_model', models.CharField(blank=True, max_length=255, verbose_name='型式')),
                ('car_name', models.CharField(blank=True, max_length=255, verbose_name='車名')),
                ('model_year', models.CharField(blank=True, choices=[('西', '西暦'), ('昭', '昭和'), ('平', '平成'), ('令', '令和')], max_length=2, verbose_name='年式_年')),
                ('model_month', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='年式_月')),
                ('inspection_year', models.IntegerField(null=True, verbose_name='車検_年')),
                ('inspection_month', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='車検_月')),
                ('model_number', models.CharField(blank=True, max_length=255, verbose_name='車台番号')),
                ('registration_number', models.CharField(blank=True, max_length=255, verbose_name='登録番号')),
                ('distance_traveled_unit', models.CharField(blank=True, choices=[('M', 'マイル'), ('KM', 'キロメータ')], default='KM', max_length=3)),
                ('distance_traveled', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='走行')),
                ('doors', models.IntegerField(default=5, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='ドア')),
                ('color', models.CharField(blank=True, max_length=255, verbose_name='色')),
                ('expeted_delivery_month', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='納車予定月')),
                ('expected_delivery_year', models.IntegerField(null=True, verbose_name='納車予定年')),
                ('extra_equipment', models.TextField(blank=True, verbose_name='装備')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started', models.DateTimeField()),
                ('last_edited', models.DateTimeField()),
                ('completed', models.DateTimeField(null=True)),
                ('notes', models.TextField(blank=True, verbose_name='備考')),
                ('person_in_charge', models.CharField(blank=True, max_length=255, verbose_name='担当者')),
                ('customer_info', models.OneToOneField(help_text='ご購入者', on_delete=django.db.models.deletion.PROTECT, to='hanbai.customerinfo')),
                ('itemization', models.OneToOneField(help_text='お支払い金額詳細', on_delete=django.db.models.deletion.PROTECT, to='hanbai.itemization')),
                ('previous_vehicle_info', models.OneToOneField(help_text='下取者', on_delete=django.db.models.deletion.PROTECT, to='hanbai.previousvehicleinfo')),
                ('registered_holder_info', models.OneToOneField(help_text='登録名義人', on_delete=django.db.models.deletion.PROTECT, to='hanbai.registeredholderinfo')),
                ('vehicle_info', models.OneToOneField(help_text='車輌明細', on_delete=django.db.models.deletion.PROTECT, to='hanbai.vehicleinfo')),
            ],
        ),
        migrations.AddField(
            model_name='itemization',
            name='consumption_tax_exemption',
            field=models.OneToOneField(help_text='消費税課税対象（非課税)', on_delete=django.db.models.deletion.PROTECT, to='hanbai.taxexemption'),
        ),
        migrations.AddField(
            model_name='itemization',
            name='custom_specs',
            field=models.OneToOneField(help_text='特別仕様', on_delete=django.db.models.deletion.PROTECT, related_name='itemization_custom_specs', to='hanbai.customsection'),
        ),
        migrations.AddField(
            model_name='itemization',
            name='insurance_tax',
            field=models.OneToOneField(help_text='税金・保険料', on_delete=django.db.models.deletion.PROTECT, to='hanbai.insurancetax'),
        ),
        migrations.CreateModel(
            name='CustomSectionFields',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hanbai.extrafield')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='hanbai.customsection')),
            ],
        ),
        migrations.AddField(
            model_name='customsection',
            name='fields',
            field=models.ManyToManyField(through='hanbai.CustomSectionFields', to='hanbai.ExtraField'),
        ),
        migrations.AddField(
            model_name='consumptiontax',
            name='extras',
            field=models.OneToOneField(help_text='追加項目', on_delete=django.db.models.deletion.CASCADE, to='hanbai.customsection'),
        ),
    ]
